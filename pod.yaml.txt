apiVersion: v1
kind: Pod
metadata:
  name: {{ .Values.pod.name | quote }}
  namespace: {{ .Values.namespace.name | quote }}
  labels: 
     app: superset
spec:
  restartPolicy: {{ .Values.pod.restartPolicy | quote }}
  initContainers:
  - name: {{ .Values.superset_initcontainer.name | quote }}
    image: {{ .Values.superset_initcontainer.image | quote }}
    imagePullPolicy: {{ .Values.superset_initcontainer.imagePullPolicy | quote }}
    command: ["/app/docker/docker-init.sh"]
    securityContext:
      runAsUser: 0
    env:
      - name: POSTGRES_HOST
        value: multitenant-service.postgresdatabase.svc.cluster.local
      - name: POSTGRES_DB
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: postgres-db
      - name: POSTGRES_USER
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: postgres-user
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: postgres-password
{{- range $key, $value := .Values.configMapdata.database }}
      - name: {{ $key | upper | replace "-" "_" }}
        value: {{ $value | quote }}
{{- end }}
{{- range $key, $value := .Values.configMapdata.redis }}
      - name: {{ $key | upper | replace "-" "_" }}
        value: {{ $value | quote }}
{{- end }}
{{- range $key, $value := .Values.configMapdata.app }}
      - name: {{ $key | upper | replace "-" "_" }}
        value: {{ $value | quote }}
{{- end }}
      - name: REDIS_HOST
        value: "localhost"
      - name: REDIS_PORT  
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: redis-port
      - name: REDIS_USER
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: redis-user
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: redis-password
      - name: DATABASE_HOST
        value: "localhost"
      - name: DATABASE_PORT
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: db-port
      - name: DATABASE_DIALECT
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: dialect
      - name: DATABASE_USER
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: db-user
      - name: DATABASE_PASSWORD
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: db-password
      - name: DATABASE_DB
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: database-db
      - name: EXAMPLES_HOST
        value: "localhost"
      - name: EXAMPLES_PORT
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: example-port
      - name: EXAMPLES_USER
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: example-user
      - name: EXAMPLES_PASSWORD
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: example-password
      - name: EXAMPLES_DB
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: example-db
      - name: SUPERSET_SECRET_KEY
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key:   app-secretkey
      - name: SUPERSET_PORT
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: superset-port
    volumeMounts:
      - name: superset-home
        mountPath: /app/superset_home
      - name: config-volume
        mountPath: /app/docker
  containers:
  - name: {{ .Values.redisContainer.name | quote }}
    image: {{ .Values.redisContainer.image | quote }}
    imagePullPolicy: {{ .Values.redisContainer.imagePullPolicy | quote }}
    readinessProbe: 
      tcpSocket:
        port: 6379
      initialDelaySeconds: 10
      periodSeconds: 10 
    env:
{{- range $key, $value := .Values.configMapdata.redis }}
      - name: {{ $key | upper | replace "-" "_" }}
        value: {{ $value | quote }}
{{- end }}
      - name: REDIS_HOST
        value: "localhost"
      - name: REDIS_PORT  
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: redis-port
      - name: REDIS_USER
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: redis-user
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: redis-password
    volumeMounts:
      - name: redis
        mountPath: /data  
  - name: {{ .Values.databaseContainer.name | quote }}
    image: {{ .Values.databaseContainer.image | quote }}
    imagePullPolicy: {{ .Values.databaseContainer.imagePullPolicy | quote }}
    readinessProbe: 
      tcpSocket:
        port: 5432
      initialDelaySeconds: 10
      periodSeconds: 10 
    env:
      - name: POSTGRES_HOST
        value: multitenant-service.postgresdatabase.svc.cluster.local
      - name: POSTGRES_DB
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: postgres-db
      - name: POSTGRES_USER
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: postgres-user
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: postgres-password
      - name: REDIS_HOST
        value: "localhost"
      - name: REDIS_PORT  
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: redis-port
      - name: REDIS_USER
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: redis-user
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: redis-password
      - name: DATABASE_HOST
        value: "localhost"
      - name: DATABASE_PORT
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: db-port
      - name: DATABASE_DIALECT
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: dialect
      - name: DATABASE_USER
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: db-user
      - name: DATABASE_PASSWORD
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: db-password
      - name: DATABASE_DB
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: database-db
      - name: EXAMPLES_HOST
        value: "localhost"
      - name: EXAMPLES_PORT
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: example-port
      - name: EXAMPLES_DB
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: example-db
      - name: EXAMPLES_USER
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: example-user
      - name: EXAMPLES_PASSWORD
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: example-password
      - name: SUPERSET_SECRET_KEY
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: app-secretkey
      - name: SUPERSET_PORT
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: superset-port
{{- range $key, $value := .Values.configMapdata.database }}
      - name: {{ $key | upper | replace "-" "_" }}
        value: {{ $value | quote }}
{{- end }}
{{- range $key, $value := .Values.configMapdata.redis }}
      - name: {{ $key | upper | replace "-" "_" }}
        value: {{ $value | quote }}
{{- end }}
{{- range $key, $value := .Values.configMapdata.app }}
      - name: {{ $key | upper | replace "-" "_" }}
        value: {{ $value | quote }}
{{- end }}
    volumeMounts:
      - name: db-home
        mountPath: /var/lib/postgresql/
      - name: db-config-volume 
        mountPath: /docker-entrypoint-initdb.d
  - name: {{ .Values.supersetContainer.name | quote }}
    image: {{ .Values.supersetContainer.image | quote }}
    imagePullPolicy: {{ .Values.supersetContainer.imagePullPolicy | quote }}
    ports:
    - containerPort: {{ .Values.supersetContainer.port }}
    securityContext:
      runAsUser: 0
    lifecycle:
      postStart:
        exec:
          command: ["/bin/sh", "-c", "sleep 60"]
    readinessProbe:
      exec:
        command:
        - /bin/bash
        - -c
        - |
          if </dev/tcp/localhost/6379 && </dev/tcp/localhost/5432; then
            echo "Port Opened, App Containers Starting..."
            exit 0
          else
            echo "Both Ports closed, waiting for readiness..."
            sleep 1
            exit 1
          fi
      initialDelaySeconds: 120
      periodSeconds: 10 
    command: ["sh","-c","sleep 30 && /app/docker/docker-bootstrap.sh app-gunicorn"]
    env:
      - name: POSTGRES_HOST
        value: multitenant-service.postgresdatabase.svc.cluster.local
      - name: POSTGRES_DB
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: postgres-db
      - name: POSTGRES_USER
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: postgres-user
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: postgres-password
{{- range $key, $value := .Values.configMapdata.database }}
      - name: {{ $key | upper | replace "-" "_" }}
        value: {{ $value | quote }}
{{- end }}
{{- range $key, $value := .Values.configMapdata.redis }}
      - name: {{ $key | upper | replace "-" "_" }}
        value: {{ $value | quote }}
{{- end }}
{{- range $key, $value := .Values.configMapdata.app }}
      - name: {{ $key | upper | replace "-" "_" }}
        value: {{ $value | quote }}
{{- end }}
      - name: DATABASE_HOST
        value: "localhost"
      - name: DATABASE_PORT
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: db-port
      - name: DATABASE_DIALECT
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: dialect
      - name: DATABASE_USER
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: db-user
      - name: DATABASE_PASSWORD
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: db-password
      - name: DATABASE_DB
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: database-db
      - name: EXAMPLES_HOST
        value: "localhost"
      - name: EXAMPLES_PORT
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: example-port
      - name: EXAMPLES_USER
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: example-user
      - name: EXAMPLES_PASSWORD
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: example-password
      - name: EXAMPLES_DB
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: example-db
      - name: REDIS_HOST
        value: "localhost"
      - name: REDIS_PORT  
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: redis-port
      - name: REDIS_USER
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: redis-user
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: redis-password
      - name: SUPERSET_SECRET_KEY
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: app-secretkey
      - name: SUPERSET_PORT
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: superset-port
    volumeMounts:
      - name: superset-home
        mountPath: /app/superset_home
      - name: config-volume
        mountPath: /app/docker
      - name: superset-config-volume
        mountPath: /app/pythonpath
  - name: {{ .Values.superset_workercontainer.name | quote }}
    image: {{ .Values.superset_workercontainer.image | quote }}
    imagePullPolicy: {{.Values.superset_workercontainer.imagePullPolicy | quote }}
    securityContext:
      runAsUser: 0
    readinessProbe:
      exec:
        command:
        - /bin/bash
        - -c
        - |
          if </dev/tcp/localhost/6379 && </dev/tcp/localhost/5432; then
            echo "Port Opened, App Containers Starting..."
            exit 0
          else
            echo "Both Ports closed, waiting for readiness..."
            sleep 1
            exit 1
          fi
      initialDelaySeconds: 100
      periodSeconds: 10 
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    livenessProbe:
      exec:
      # -- Liveness probe command
      # @default -- a `celery inspect ping` command
        command:
          - sh
          - -c
          - celery -A superset.tasks.celery_app:app inspect ping -d celery@$HOSTNAME
      initialDelaySeconds: 30
      timeoutSeconds: 60
    env:
      - name: POSTGRES_HOST
        value: multitenant-service.postgresdatabase.svc.cluster.local
      - name: POSTGRES_DB
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: postgres-db
      - name: POSTGRES_USER
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: postgres-user
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: postgres-password
{{- range $key, $value := .Values.configMapdata.database }}
      - name: {{ $key | upper | replace "-" "_" }}
        value: {{ $value | quote }}
{{- end }}
{{- range $key, $value := .Values.configMapdata.redis }}
      - name: {{ $key | upper | replace "-" "_" }}
        value: {{ $value | quote }}
{{- end }}
{{- range $key, $value := .Values.configMapdata.app }}
      - name: {{ $key | upper | replace "-" "_" }}
        value: {{ $value | quote }}
{{- end }}
      - name: DATABASE_HOST
        value: "localhost"
      - name: DATABASE_PORT
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: db-port
      - name: DATABASE_DIALECT
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: dialect
      - name: DATABASE_USER
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: db-user
      - name: DATABASE_PASSWORD
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: db-password
      - name: DATABASE_DB
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: database-db
      - name: EXAMPLES_HOST
        value: "localhost"
      - name: EXAMPLES_PORT
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: example-port
      - name: EXAMPLES_USER
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: example-user
      - name: EXAMPLES_PASSWORD
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: example-password
      - name: EXAMPLES_DB
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: example-db
      - name: REDIS_HOST
        value: "localhost"
      - name: REDIS_PORT  
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: redis-port
      - name: REDIS_USER
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: redis-user
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: redis-password
      - name: SUPERSET_SECRET_KEY
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: app-secretkey
      - name: SUPERSET_PORT
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: superset-port
    volumeMounts:
      - name: superset-home
        mountPath: /app/superset_home
      - name: config-volume
        mountPath: /app/docker
      - name: superset-config-volume
        mountPath: /app/pythonpath
  - name: {{ .Values.superset_worker_beatcontainer.name | quote }}
    image: {{ .Values.superset_worker_beatcontainer.image | quote }}
    imagePullPolicy: {{ .Values.superset_worker_beatcontainer.imagePullPolicy | quote }}
    command: ["/app/docker/docker-bootstrap.sh", "beat"]
    securityContext:
      runAsUser: 0
    env:
      - name: POSTGRES_HOST
        value: multitenant-service.postgresdatabase.svc.cluster.local
      - name: POSTGRES_DB
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: postgres-db
      - name: POSTGRES_USER
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: postgres-user
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: postgres-password
{{- range $key, $value := .Values.configMapdata.database }}
      - name: {{ $key | upper | replace "-" "_" }}
        value: {{ $value | quote }}
{{- end }}
{{- range $key, $value := .Values.configMapdata.redis }}
      - name: {{ $key | upper | replace "-" "_" }}
        value: {{ $value | quote }}
{{- end }}
{{- range $key, $value := .Values.configMapdata.app }}
      - name: {{ $key | upper | replace "-" "_" }}
        value: {{ $value | quote }}
{{- end }}
      - name: DATABASE_HOST
        value: "localhost"
      - name: DATABASE_PORT
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: db-port
      - name: DATABASE_DIALECT
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: dialect
      - name: DATABASE_USER
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: db-user
      - name: DATABASE_PASSWORD
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: db-password
      - name: DATABASE_DB
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: database-db
      - name: EXAMPLES_HOST
        value: "localhost"
      - name: EXAMPLES_PORT
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: example-port
      - name: EXAMPLES_USER
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: example-user
      - name: EXAMPLES_PASSWORD
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: example-password
      - name: EXAMPLES_DB
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: example-db
      - name: REDIS_HOST
        value: "localhost"
      - name: REDIS_PORT  
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: redis-port
      - name: REDIS_USER
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: redis-user
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: redis-password
      - name: SUPERSET_SECRET_KEY
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: app-secretkey
      - name: SUPERSET_PORT
        valueFrom:
          secretKeyRef:
            name: {{ .Values.secretcredname | quote }}
            key: superset-port
    volumeMounts:
      - name: superset-home
        mountPath: /app/superset_home
      - name: config-volume
        mountPath: /app/docker
      - name: superset-config-volume
        mountPath: /app/pythonpath
    # livenessProbe:
    #   exec:
    #     command:
    #     - /bin/sh
    #     - -c
    #     - exit 0
    # readinessProbe:
    #    exec:
    #      command:
    #      - /bin/sh
    #      - -c
    #      - exit 0
  imagePullSecrets:
  - name: {{ .Values.ecrsecretname | quote }}
  volumes:
    - name: redis
      persistentVolumeClaim:
        claimName: {{ .Values.pvc.redis.name | quote }}
    - name: db-home
      persistentVolumeClaim:
        claimName: {{ .Values.pvc.database.name | quote }}
    - name: superset-home
      persistentVolumeClaim:
        claimName: {{ .Values.pvc.superset.name | quote }}
    - name: config-volume
      configMap:
        name: {{ .Values.file1configmap | quote }} 
        defaultMode: 0777
    - name: db-config-volume
      configMap:
        name: {{ .Values.file2configmap | quote }}
        defaultMode: 0777
    - name: superset-config-volume
      configMap:
        name: {{ .Values.file3configmap | quote }}
        defaultMode: 0777
